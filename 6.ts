type Item = {
    id: string;
  };
        
  type Post = Item & {
    title: string;
    description: string;
  };
        
  type MegaPost = Post & {
    viewsCount: number;
  };
      
  // Вернулись к дженерикам с указанием верхней границы для типа
  function printId<T extends Item = Item>(post: T): void {
    console.log(post.id);
  }
    
  const myItem: Item = {id: '31337nb'};
    
  printId(myItem); // OK. 31337nb

  Ещё немного про дженерики. При определении переменных для типа мы можем предусмотреть для них значение по умолчанию. Синтаксически и по смыслу это напоминает значения по умолчанию для параметров функций.

В примере мы буквально говорим, что под типом T подразумевается Item. Именно этот тип мы указали после оператора =.

Стоит добавить, что тип по умолчанию можно указать не только, когда применяем extends.